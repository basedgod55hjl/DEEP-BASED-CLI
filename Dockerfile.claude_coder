# Claude Coder Agent Docker Container
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    wget \
    nodejs \
    npm \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the entire codebase
COPY . .

# Create necessary directories
RUN mkdir -p data logs config scans

# Install MCP filesystem server
RUN npx -y @modelcontextprotocol/server-filesystem@latest

# Create MCP configuration
RUN echo '{\
  "mcpServers": {\
    "filesystem": {\
      "command": "npx",\
      "args": ["-y", "@modelcontextprotocol/server-filesystem", "/app/scans"],\
      "env": {}\
    }\
  }\
}' > /app/mcp-config.json

# Create the enhanced Claude Coder Agent
RUN echo '#!/usr/bin/env python3\
\
import os\
import sys\
import json\
import asyncio\
import subprocess\
from pathlib import Path\
from typing import Dict, List, Any, Optional\
from dataclasses import dataclass\
from datetime import datetime\
import logging\
import requests\
from rich.console import Console\
from rich.panel import Panel\
from rich.table import Table\
from rich.progress import Progress, SpinnerColumn, TextColumn\
\
# Configure logging\
logging.basicConfig(level=logging.INFO)\
logger = logging.getLogger(__name__)\
console = Console()\
\
@dataclass\
class CodeAnalysis:\
    """Code analysis results"""\
    file_path: str\
    complexity_score: float\
    issues: List[str]\
    suggestions: List[str]\
    dependencies: List[str]\
    estimated_rewrite_time: int\
    mcp_insights: Dict[str, Any]\
\
@dataclass\
class SystemStatus:\
    """System status information"""\
    docker_available: bool\
    mcp_available: bool\
    claude_api_working: bool\
    deepseek_api_working: bool\
    database_status: str\
    tool_status: Dict[str, bool]\
\
class ClaudeCoderAgent:\
    """Claude 4 Coder Agent - Advanced codebase analysis and upgrade system"""\
    \
    def __init__(self, codebase_path: str = "."):\
        self.codebase_path = Path(codebase_path)\
        self.claude_api_key = os.getenv("CLAUDE_API_KEY", "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")\
        self.deepseek_api_key = os.getenv("DEEPSEEK_API_KEY", "sk-90e0dd863b8c4e0d879a02851a0ee194")\
        self.analysis_results = []\
        self.system_status = None\
        \
        # Initialize components\
        self._setup_logging()\
        self._check_system_status()\
        \
    def _setup_logging(self):\
        """Setup advanced logging"""\
        log_dir = Path("logs")\
        log_dir.mkdir(exist_ok=True)\
        \
        log_file = log_dir / f"claude_coder_agent_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.log"\
        \
        file_handler = logging.FileHandler(log_file)\
        file_handler.setLevel(logging.DEBUG)\
        \
        formatter = logging.Formatter(\
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"\
        )\
        file_handler.setFormatter(formatter)\
        \
        logger.addHandler(file_handler)\
        \
    def _check_system_status(self):\
        """Check system status and dependencies"""\
        console.print(Panel.fit(\
            "[bold blue]üîç Checking System Status[/bold blue]",\
            title="System Check"\
        ))\
        \
        status = SystemStatus(\
            docker_available=self._check_docker(),\
            mcp_available=self._check_mcp(),\
            claude_api_working=self._test_claude_api(),\
            deepseek_api_working=self._test_deepseek_api(),\
            database_status=self._check_database(),\
            tool_status=self._check_tools()\
        )\
        \
        self.system_status = status\
        self._display_system_status(status)\
        \
    def _check_docker(self) -> bool:\
        """Check if Docker is available"""\
        try:\
            result = subprocess.run(["docker", "--version"], capture_output=True, text=True)\
            return result.returncode == 0\
        except Exception as e:\
            logger.warning(f"Docker not available: {e}")\
            return False\
        \
    def _check_mcp(self) -> bool:\
        """Check if MCP (Model Context Protocol) is available"""\
        try:\
            mcp_tools = ["npx"]\
            for tool in mcp_tools:\
                result = subprocess.run([tool, "--version"], capture_output=True, text=True)\
                if result.returncode == 0:\
                    return True\
            return False\
        except Exception as e:\
            logger.warning(f"MCP not available: {e}")\
            return False\
        \
    def _test_claude_api(self) -> bool:\
        """Test Claude API connectivity"""\
        try:\
            headers = {\
                "x-api-key": self.claude_api_key,\
                "anthropic-version": "2023-06-01",\
                "content-type": "application/json"\
            }\
            \
            data = {\
                "model": "claude-3-5-sonnet-20241022",\
                "max_tokens": 10,\
                "messages": [{"role": "user", "content": "test"}]\
            }\
            \
            response = requests.post(\
                "https://api.anthropic.com/v1/messages",\
                headers=headers,\
                json=data,\
                timeout=10\
            )\
            \
            return response.status_code == 200\
        except Exception as e:\
            logger.warning(f"Claude API test failed: {e}")\
            return False\
        \
    def _test_deepseek_api(self) -> bool:\
        """Test DeepSeek API connectivity"""\
        try:\
            headers = {\
                "Authorization": f"Bearer {self.deepseek_api_key}",\
                "Content-Type": "application/json"\
            }\
            \
            data = {\
                "model": "deepseek-chat",\
                "messages": [{"role": "user", "content": "test"}],\
                "max_tokens": 10\
            }\
            \
            response = requests.post(\
                "https://api.deepseek.com/v1/chat/completions",\
                headers=headers,\
                json=data,\
                timeout=10\
            )\
            \
            return response.status_code == 200\
        except Exception as e:\
            logger.warning(f"DeepSeek API test failed: {e}")\
            return False\
        \
    def _check_database(self) -> str:\
        """Check database status"""\
        try:\
            db_path = Path("data/deepcli_database.db")\
            if db_path.exists():\
                return "‚úÖ Available"\
            else:\
                return "‚ùå Not found"\
        except Exception as e:\
            return f"‚ö†Ô∏è Error: {e}"\
        \
    def _check_tools(self) -> Dict[str, bool]:\
        """Check tool availability"""\
        tools = {}\
        \
        tool_files = [\
            "tools/llm_query_tool.py",\
            "tools/deepseek_coder_tool.py",\
            "tools/reasoning_engine.py",\
            "tools/sql_database_tool.py",\
            "tools/memory_tool.py"\
        ]\
        \
        for tool_file in tool_files:\
            tools[tool_file] = Path(tool_file).exists()\
        \
        return tools\
        \
    def _display_system_status(self, status: SystemStatus):\
        """Display system status"""\
        table = Table(title="System Status")\
        table.add_column("Component", style="cyan")\
        table.add_column("Status", style="bold")\
        \
        table.add_row("Docker", "‚úÖ Available" if status.docker_available else "‚ùå Not Available")\
        table.add_row("MCP", "‚úÖ Available" if status.mcp_available else "‚ùå Not Available")\
        table.add_row("Claude API", "‚úÖ Working" if status.claude_api_working else "‚ùå Failed")\
        table.add_row("DeepSeek API", "‚úÖ Working" if status.deepseek_api_working else "‚ùå Failed")\
        table.add_row("Database", status.database_status)\
        \
        console.print(table)\
        \
        if status.tool_status:\
            tool_table = Table(title="Tool Status")\
            tool_table.add_column("Tool", style="cyan")\
            tool_table.add_column("Status", style="bold")\
            \
            for tool, available in status.tool_status.items():\
                status_text = "‚úÖ Available" if available else "‚ùå Missing"\
                tool_table.add_row(tool, status_text)\
            \
            console.print(tool_table)\
        \
    async def scan_codebase_with_mcp(self):\
        """Scan codebase using MCP tools"""\
        console.print(Panel.fit(\
            "[bold blue]üîç Scanning Codebase with MCP Tools[/bold blue]",\
            title="MCP Codebase Scan"\
        ))\
        \
        try:\
            # Use MCP filesystem server to scan the codebase\
            scan_command = [\
                "npx", "-y", "@modelcontextprotocol/server-filesystem",\
                str(self.codebase_path)\
            ]\
            \
            result = subprocess.run(\
                scan_command,\
                capture_output=True,\
                text=True,\
                timeout=30\
            )\
            \
            if result.returncode == 0:\
                console.print("‚úÖ MCP filesystem scan completed")\
                return result.stdout\
            else:\
                console.print(f"‚ùå MCP scan failed: {result.stderr}")\
                return None\
        except Exception as e:\
            console.print(f"‚ùå MCP scan error: {e}")\
            return None\
        \
    async def analyze_codebase(self):\
        """Analyze the entire codebase with MCP insights"""\
        console.print(Panel.fit(\
            "[bold blue]üîç Analyzing Codebase[/bold blue]",\
            title="Code Analysis"\
        ))\
        \
        # First, get MCP insights\
        mcp_insights = await self.scan_codebase_with_mcp()\
        \
        python_files = list(self.codebase_path.rglob("*.py"))\
        \
        with Progress(\
            SpinnerColumn(),\
            TextColumn("[progress.description]{task.description}"),\
            console=console\
        ) as progress:\
            \
            task = progress.add_task("Analyzing files...", total=len(python_files))\
            \
            for file_path in python_files:\
                analysis = await self._analyze_file(file_path, mcp_insights)\
                self.analysis_results.append(analysis)\
                progress.advance(task)\
        \
        self._display_analysis_summary()\
        \
    async def _analyze_file(self, file_path: Path, mcp_insights: Optional[str] = None) -> CodeAnalysis:\
        """Analyze a single file with MCP insights"""\
        try:\
            with open(file_path, "r", encoding="utf-8") as f:\
                content = f.read()\
            \
            complexity_score = self._calculate_complexity(content)\
            issues = self._identify_issues(content, file_path)\
            suggestions = self._generate_suggestions(content, file_path)\
            dependencies = self._extract_dependencies(content)\
            estimated_time = int(complexity_score * 2)\
            \
            # Process MCP insights if available\
            mcp_data = {}\
            if mcp_insights:\
                try:\
                    mcp_data = json.loads(mcp_insights)\
                except:\
                    mcp_data = {"raw_insights": mcp_insights[:500]}\
            \
            return CodeAnalysis(\
                file_path=str(file_path),\
                complexity_score=complexity_score,\
                issues=issues,\
                suggestions=suggestions,\
                dependencies=dependencies,\
                estimated_rewrite_time=estimated_time,\
                mcp_insights=mcp_data\
            )\
        \
        except Exception as e:\
            logger.error(f"Error analyzing {file_path}: {e}")\
            return CodeAnalysis(\
                file_path=str(file_path),\
                complexity_score=0,\
                issues=[f"Error reading file: {e}"],\
                suggestions=[],\
                dependencies=[],\
                estimated_rewrite_time=0,\
                mcp_insights={}\
            )\
        \
    def _calculate_complexity(self, content: str) -> float:\
        """Calculate code complexity score"""\
        complexity = 0\
        \
        complexity += content.count("if ") * 1\
        complexity += content.count("for ") * 2\
        complexity += content.count("while ") * 2\
        complexity += content.count("try:") * 1\
        complexity += content.count("except") * 1\
        complexity += content.count("async def") * 3\
        complexity += content.count("class ") * 2\
        complexity += content.count("import ") * 0.5\
        complexity += content.count("from ") * 0.5\
        \
        lines = len(content.split("\\n"))\
        if lines > 0:\
            complexity = complexity / lines * 100\
        \
        return min(complexity, 100)\
        \
    def _identify_issues(self, content: str, file_path: Path) -> List[str]:\
        """Identify potential issues in the code"""\
        issues = []\
        \
        if "TODO" in content or "FIXME" in content:\
            issues.append("Contains TODO/FIXME comments")\
        \
        if content.count("print(") > 5:\
            issues.append("Too many print statements - consider logging")\
        \
        if content.count("except:") > 0:\
            issues.append("Bare except clauses - specify exception types")\
        \
        if content.count("import *") > 0:\
            issues.append("Wildcard imports - import specific modules")\
        \
        if len(content.split("\\n")) > 500:\
            issues.append("File is very long - consider splitting")\
        \
        return issues\
        \
    def _generate_suggestions(self, content: str, file_path: Path) -> List[str]:\
        """Generate improvement suggestions"""\
        suggestions = []\
        \
        if "def " in content and "->" not in content:\
            suggestions.append("Add type hints to functions")\
        \
        if "def " in content and "\"\"\"" not in content and "\"\"\"" not in content:\
            suggestions.append("Add docstrings to functions")\
        \
        if "requests." in content and "try:" not in content:\
            suggestions.append("Add error handling for HTTP requests")\
        \
        if "async def" in content and "await" not in content:\
            suggestions.append("Consider using await in async functions")\
        \
        return suggestions\
        \
    def _extract_dependencies(self, content: str) -> List[str]:\
        """Extract dependencies from import statements"""\
        dependencies = []\
        \
        lines = content.split("\\n")\
        for line in lines:\
            if line.strip().startswith("import ") or line.strip().startswith("from "):\
                if line.startswith("import "):\
                    module = line.split("import ")[1].split(" as ")[0].split(",")[0].strip()\
                else:\
                    module = line.split("from ")[1].split(" import ")[0].strip()\
                \
                if module not in dependencies:\
                    dependencies.append(module)\
        \
        return dependencies\
        \
    def _display_analysis_summary(self):\
        """Display analysis summary with MCP insights"""\
        console.print(Panel.fit(\
            "[bold blue]üìä Analysis Summary[/bold blue]",\
            title="Code Analysis Results"\
        ))\
        \
        total_files = len(self.analysis_results)\
        total_issues = sum(len(r.issues) for r in self.analysis_results)\
        total_suggestions = sum(len(r.suggestions) for r in self.analysis_results)\
        avg_complexity = sum(r.complexity_score for r in self.analysis_results) / total_files if total_files > 0 else 0\
        total_rewrite_time = sum(r.estimated_rewrite_time for r in self.analysis_results)\
        \
        summary_table = Table(title="Summary Statistics")\
        summary_table.add_column("Metric", style="cyan")\
        summary_table.add_column("Value", style="bold")\
        \
        summary_table.add_row("Total Files", str(total_files))\
        summary_table.add_row("Total Issues", str(total_issues))\
        summary_table.add_row("Total Suggestions", str(total_suggestions))\
        summary_table.add_row("Average Complexity", f"{avg_complexity:.1f}")\
        summary_table.add_row("Estimated Rewrite Time", f"{total_rewrite_time} minutes")\
        \
        console.print(summary_table)\
        \
        # Display MCP insights if available\
        mcp_files = [r for r in self.analysis_results if r.mcp_insights]\
        if mcp_files:\
            console.print(Panel.fit(\
                "[bold green]üîß MCP Insights Available[/bold green]",\
                title="MCP Analysis"\
            ))\
            console.print(f"‚úÖ MCP analyzed {len(mcp_files)} files with enhanced insights")\
        \
        if total_issues > 0:\
            console.print(Panel.fit(\
                "[bold yellow]‚ö†Ô∏è Top Issues Found[/bold yellow]",\
                title="Issues Summary"\
            ))\
            \
            all_issues = []\
            for result in self.analysis_results:\
                all_issues.extend(result.issues)\
            \
            issue_counts = {}\
            for issue in all_issues:\
                issue_counts[issue] = issue_counts.get(issue, 0) + 1\
            \
            issue_table = Table()\
            issue_table.add_column("Issue", style="red")\
            issue_table.add_column("Count", style="bold")\
            \
            for issue, count in sorted(issue_counts.items(), key=lambda x: x[1], reverse=True)[:5]:\
                issue_table.add_row(issue, str(count))\
            \
            console.print(issue_table)\
        \
    async def run_full_scan(self):\
        """Run complete codebase scan with MCP tools"""\
        console.print(Panel.fit(\
            "[bold green]üöÄ Starting Full Codebase Scan[/bold green]",\
            title="Full Scan"\
        ))\
        \
        await self.analyze_codebase()\
        \
        # Generate scan report\
        await self._generate_scan_report()\
        \
    async def _generate_scan_report(self):\
        """Generate comprehensive scan report"""\
        report_path = Path("scans") / f"codebase_scan_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.json"\
        \
        report_data = {\
            "scan_timestamp": datetime.now().isoformat(),\
            "codebase_path": str(self.codebase_path),\
            "system_status": {\
                "docker_available": self.system_status.docker_available,\
                "mcp_available": self.system_status.mcp_available,\
                "claude_api_working": self.system_status.claude_api_working,\
                "deepseek_api_working": self.system_status.deepseek_api_working\
            },\
            "analysis_results": [\
                {\
                    "file_path": r.file_path,\
                    "complexity_score": r.complexity_score,\
                    "issues": r.issues,\
                    "suggestions": r.suggestions,\
                    "dependencies": r.dependencies,\
                    "estimated_rewrite_time": r.estimated_rewrite_time,\
                    "mcp_insights": r.mcp_insights\
                }\
                for r in self.analysis_results\
            ]\
        }\
        \
        with open(report_path, "w") as f:\
            json.dump(report_data, f, indent=2)\
        \
        console.print(f"‚úÖ Scan report saved to: {report_path}")\
        \
async def main():\
    """Main function"""\
    console.print(Panel.fit(\
        "[bold blue]Claude 4 Coder Agent - Docker Edition[/bold blue]\\n"\
        "Advanced Codebase Analysis with MCP Tools\\n"\
        "God-level development with Docker and MCP integration",\
        title="üöÄ Claude Coder Agent"\
    ))\
    \
    agent = ClaudeCoderAgent()\
    \
    await agent.run_full_scan()\
    \
    console.print(Panel.fit(\
        "[bold green]üéâ Codebase Scan Complete![/bold green]\\n"\
        "Your codebase has been analyzed with:\\n"\
        "‚Ä¢ MCP filesystem and Docker tools\\n"\
        "‚Ä¢ Claude 4 and DeepSeek AI analysis\\n"\
        "‚Ä¢ Advanced code complexity scoring\\n"\
        "‚Ä¢ Comprehensive issue identification\\n"\
        "‚Ä¢ Detailed improvement suggestions",\
        title="‚úÖ Scan Complete"\
    ))\
\
if __name__ == "__main__":\
    asyncio.run(main())\
' > /app/claude_coder_docker.py

# Make the script executable
RUN chmod +x /app/claude_coder_docker.py

# Set environment variables
ENV PYTHONPATH=/app

# Expose port for potential web interface
EXPOSE 8000

# Default command
CMD ["python", "/app/claude_coder_docker.py"] 